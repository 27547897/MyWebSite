/*! AdminLTE app.js
* ================
* Main JS application file for AdminLTE v2. This file
* should be included in all pages. It controls some layout
* options and implements exclusive AdminLTE plugins.
*
* @Author  Almsaeed Studio
* @Support <https://www.almsaeedstudio.com>
* @Email   <abdullah@almsaeedstudio.com>
* @version 2.4.0
* @repository git://github.com/almasaeed2010/AdminLTE.git
* @license MIT <http://opensource.org/licenses/MIT>
*/

// Make sure jQuery has been loaded
if (typeof jQuery === 'undefined') {
    throw new Error('AdminLTE requires jQuery')
}

/* BoxRefresh()
 * =========
 * Adds AJAX content control to a box.
 *
 * @Usage: $('#my-box').boxRefresh(options)
 *         or add [data-widget="box-refresh"] to the box element
 *         Pass any option as data-option="value"
 */
+function ($) {
    'use strict'

    var DataKey = 'lte.boxrefresh'

    var Default = {
        source: '',
        params: {},
        trigger: '.refresh-btn',
        content: '.box-body',
        loadInContent: true,
        responseType: '',
        overlayTemplate: '<div class="overlay"><div class="fa fa-refresh fa-spin"></div></div>',
        onLoadStart: function () {
        },
        onLoadDone: function (response) {
            return response
        }
    }

    var Selector = {
        data: '[data-widget="box-refresh"]'
    }

    // BoxRefresh Class Definition
    // =========================
    var BoxRefresh = function (element, options) {
        this.element = element
        this.options = options
        this.$overlay = $(options.overlay)

        if (options.source === '') {
            throw new Error('Source url was not defined. Please specify a url in your BoxRefresh source option.')
        }

        this._setUpListeners()
        this.load()
    }

    BoxRefresh.prototype.load = function () {
        this._addOverlay()
        this.options.onLoadStart.call($(this))

        $.get(this.options.source, this.options.params, function (response) {
            if (this.options.loadInContent) {
                $(this.options.content).html(response)
            }
            this.options.onLoadDone.call($(this), response)
            this._removeOverlay()
        }.bind(this), this.options.responseType !== '' && this.options.responseType)
    }

    // Private

    BoxRefresh.prototype._setUpListeners = function () {
        $(this.element).on('click', Selector.trigger, function (event) {
            if (event) event.preventDefault()
            this.load()
        }.bind(this))
    }

    BoxRefresh.prototype._addOverlay = function () {
        $(this.element).append(this.$overlay)
    }

    BoxRefresh.prototype._removeOverlay = function () {
        $(this.element).remove(this.$overlay)
    }

    // Plugin Definition
    // =================
    function Plugin(option) {
        return this.each(function () {
            var $this = $(this)
            var data = $this.data(DataKey)

            if (!data) {
                var options = $.extend({}, Default, $this.data(), typeof option == 'object' && option)
                $this.data(DataKey, (data = new BoxRefresh($this, options)))
            }

            if (typeof data == 'string') {
                if (typeof data[option] == 'undefined') {
                    throw new Error('No method named ' + option)
                }
                data[option]()
            }
        })
    }

    var old = $.fn.boxRefresh

    $.fn.boxRefresh = Plugin
    $.fn.boxRefresh.Constructor = BoxRefresh

    // No Conflict Mode
    // ================
    $.fn.boxRefresh.noConflict = function () {
        $.fn.boxRefresh = old
        return this
    }

    // BoxRefresh Data API
    // =================
    $(window).on('load', function () {
        $(Selector.data).each(function () {
            Plugin.call($(this))
        })
    })

}(jQuery)


    /* BoxWidget()
     * ======
     * Adds box widget functions to boxes.
     *
     * @Usage: $('.my-box').boxWidget(options)
     *         This plugin auto activates on any element using the `.box` class
     *         Pass any option as data-option="value"
     */
    + function ($) {
        'use strict'

        var DataKey = 'lte.boxwidget'

        var Default = {
            animationSpeed: 500,
            collapseTrigger: '[data-widget="collapse"]',
            removeTrigger: '[data-widget="remove"]',
            collapseIcon: 'fa-minus',
            expandIcon: 'fa-plus',
            removeIcon: 'fa-times'
        }

        var Selector = {
            data: '.box',
            collapsed: '.collapsed-box',
            body: '.box-body',
            footer: '.box-footer',
            tools: '.box-tools'
        }

        var ClassName = {
            collapsed: 'collapsed-box'
        }

        var Event = {
            collapsed: 'collapsed.boxwidget',
            expanded: 'expanded.boxwidget',
            removed: 'removed.boxwidget'
        }

        // BoxWidget Class Definition
        // =====================
        var BoxWidget = function (element, options) {
            this.element = element
            this.options = options

            this._setUpListeners()
        }

        BoxWidget.prototype.toggle = function () {
            var isOpen = !$(this.element).is(Selector.collapsed)

            if (isOpen) {
                this.collapse()
            } else {
                this.expand()
            }
        }

        BoxWidget.prototype.expand = function () {
            var expandedEvent = $.Event(Event.expanded)
            var collapseIcon = this.options.collapseIcon
            var expandIcon = this.options.expandIcon

            $(this.element).removeClass(ClassName.collapsed)

            $(this.element)
                .find(Selector.tools)
                .find('.' + expandIcon)
                .removeClass(expandIcon)
                .addClass(collapseIcon)

            $(this.element).find(Selector.body + ', ' + Selector.footer)
                .slideDown(this.options.animationSpeed, function () {
                    $(this.element).trigger(expandedEvent)
                }.bind(this))
        }

        BoxWidget.prototype.collapse = function () {
            var collapsedEvent = $.Event(Event.collapsed)
            var collapseIcon = this.options.collapseIcon
            var expandIcon = this.options.expandIcon

            $(this.element)
                .find(Selector.tools)
                .find('.' + collapseIcon)
                .removeClass(collapseIcon)
                .addClass(expandIcon)

            $(this.element).find(Selector.body + ', ' + Selector.footer)
                .slideUp(this.options.animationSpeed, function () {
                    $(this.element).addClass(ClassName.collapsed)
                    $(this.element).trigger(collapsedEvent)
                }.bind(this))
        }

        BoxWidget.prototype.remove = function () {
            var removedEvent = $.Event(Event.removed)

            $(this.element).slideUp(this.options.animationSpeed, function () {
                $(this.element).trigger(removedEvent)
                $(this.element).remove()
            }.bind(this))
        }

        // Private

        BoxWidget.prototype._setUpListeners = function () {
            var that = this

            $(this.element).on('click', this.options.collapseTrigger, function (event) {
                if (event) event.preventDefault()
                that.toggle()
            })

            $(this.element).on('click', this.options.removeTrigger, function (event) {
                if (event) event.preventDefault()
                that.remove()
            })
        }

        // Plugin Definition
        // =================
        function Plugin(option) {
            return this.each(function () {
                var $this = $(this)
                var data = $this.data(DataKey)

                if (!data) {
                    var options = $.extend({}, Default, $this.data(), typeof option == 'object' && option)
                    $this.data(DataKey, (data = new BoxWidget($this, options)))
                }

                if (typeof option == 'string') {
                    if (typeof data[option] == 'undefined') {
                        throw new Error('No method named ' + option)
                    }
                    data[option]()
                }
            })
        }

        var old = $.fn.boxWidget

        $.fn.boxWidget = Plugin
        $.fn.boxWidget.Constructor = BoxWidget

        // No Conflict Mode
        // ================
        $.fn.boxWidget.noConflict = function () {
            $.fn.boxWidget = old
            return this
        }

        // BoxWidget Data API
        // ==================
        $(window).on('load', function () {
            $(Selector.data).each(function () {
                Plugin.call($(this))
            })
        })

    }(jQuery)


    /* ControlSidebar()
     * ===============
     * Toggles the state of the control sidebar
     *
     * @Usage: $('#control-sidebar-trigger').controlSidebar(options)
     *         or add [data-toggle="control-sidebar"] to the trigger
     *         Pass any option as data-option="value"
     */
    + function ($) {
        'use strict'

        var DataKey = 'lte.controlsidebar'

        var Default = {
            slide: true
        }

        var Selector = {
            sidebar: '.control-sidebar',
            data: '[data-toggle="control-sidebar"]',
            open: '.control-sidebar-open',
            bg: '.control-sidebar-bg',
            wrapper: '.wrapper',
            content: '.content-wrapper',
            boxed: '.layout-boxed'
        }

        var ClassName = {
            open: 'control-sidebar-open',
            fixed: 'fixed'
        }

        var Event = {
            collapsed: 'collapsed.controlsidebar',
            expanded: 'expanded.controlsidebar'
        }

        // ControlSidebar Class Definition
        // ===============================
        var ControlSidebar = function (element, options) {
            this.element = element
            this.options = options
            this.hasBindedResize = false

            this.init()
        }

        ControlSidebar.prototype.init = function () {
            // Add click listener if the element hasn't been
            // initialized using the data API
            if (!$(this.element).is(Selector.data)) {
                $(this).on('click', this.toggle)
            }

            this.fix()
            $(window).resize(function () {
                this.fix()
            }.bind(this))
        }

        ControlSidebar.prototype.toggle = function (event) {
            if (event) event.preventDefault()

            this.fix()

            if (!$(Selector.sidebar).is(Selector.open) && !$('body').is(Selector.open)) {
                this.expand()
            } else {
                this.collapse()
            }
        }

        ControlSidebar.prototype.expand = function () {
            if (!this.options.slide) {
                $('body').addClass(ClassName.open)
            } else {
                $(Selector.sidebar).addClass(ClassName.open)
            }

            $(this.element).trigger($.Event(Event.expanded))
        }

        ControlSidebar.prototype.collapse = function () {
            $('body, ' + Selector.sidebar).removeClass(ClassName.open)
            $(this.element).trigger($.Event(Event.collapsed))
        }

        ControlSidebar.prototype.fix = function () {
            if ($('body').is(Selector.boxed)) {
                this._fixForBoxed($(Selector.bg))
            }
        }

        // Private

        ControlSidebar.prototype._fixForBoxed = function (bg) {
            bg.css({
                position: 'absolute',
                height: $(Selector.wrapper).height()
            })
        }

        // Plugin Definition
        // =================
        function Plugin(option) {
            return this.each(function () {
                var $this = $(this)
                var data = $this.data(DataKey)

                if (!data) {
                    var options = $.extend({}, Default, $this.data(), typeof option == 'object' && option)
                    $this.data(DataKey, (data = new ControlSidebar($this, options)))
                }

                if (typeof option == 'string') data.toggle()
            })
        }

        var old = $.fn.controlSidebar

        $.fn.controlSidebar = Plugin
        $.fn.controlSidebar.Constructor = ControlSidebar

        // No Conflict Mode
        // ================
        $.fn.controlSidebar.noConflict = function () {
            $.fn.controlSidebar = old
            return this
        }

        // ControlSidebar Data API
        // =======================
        $(document).on('click', Selector.data, function (event) {
            if (event) event.preventDefault()
            Plugin.call($(this), 'toggle')
        })

    }(jQuery)


    /* DirectChat()
     * ===============
     * Toggles the state of the control sidebar
     *
     * @Usage: $('#my-chat-box').directChat()
     *         or add [data-widget="direct-chat"] to the trigger
     */
    + function ($) {
        'use strict'

        var DataKey = 'lte.directchat'

        var Selector = {
            data: '[data-widget="chat-pane-toggle"]',
            box: '.direct-chat'
        }

        var ClassName = {
            open: 'direct-chat-contacts-open'
        }

        // DirectChat Class Definition
        // ===========================
        var DirectChat = function (element) {
            this.element = element
        }

        DirectChat.prototype.toggle = function ($trigger) {
            $trigger.parents(Selector.box).first().toggleClass(ClassName.open)
        }

        // Plugin Definition
        // =================
        function Plugin(option) {
            return this.each(function () {
                var $this = $(this)
                var data = $this.data(DataKey)

                if (!data) {
                    $this.data(DataKey, (data = new DirectChat($this)))
                }

                if (typeof option == 'string') data.toggle($this)
            })
        }

        var old = $.fn.directChat

        $.fn.directChat = Plugin
        $.fn.directChat.Constructor = DirectChat

        // No Conflict Mode
        // ================
        $.fn.directChat.noConflict = function () {
            $.fn.directChat = old
            return this
        }

        // DirectChat Data API
        // ===================
        $(document).on('click', Selector.data, function (event) {
            if (event) event.preventDefault()
            Plugin.call($(this), 'toggle')
        })

    }(jQuery)


    /* Layout()
     * ========
     * Implements AdminLTE layout.
     * Fixes the layout height in case min-height fails.
     *
     * @usage activated automatically upon window load.
     *        Configure any options by passing data-option="value"
     *        to the body tag.
     */
    + function ($) {
        'use strict'

        var DataKey = 'lte.layout'

        var Default = {
            slimscroll: true,
            resetHeight: true
        }

        var Selector = {
            wrapper: '.wrapper',
            contentWrapper: '.content-wrapper',
            layoutBoxed: '.layout-boxed',
            mainFooter: '.main-footer',
            mainHeader: '.main-header',
            sidebar: '.sidebar',
            controlSidebar: '.control-sidebar',
            fixed: '.fixed',
            sidebarMenu: '.sidebar-menu',
            logo: '.main-header .logo'
        }

        var ClassName = {
            fixed: 'fixed',
            holdTransition: 'hold-transition'
        }

        var Layout = function (options) {
            this.options = options
            this.bindedResize = false
            this.activate()
        }

        Layout.prototype.activate = function () {
            this.fix()
            this.fixSidebar()

            $('body').removeClass(ClassName.holdTransition)

            if (this.options.resetHeight) {
                $('body, html, ' + Selector.wrapper).css({
                    'height': 'auto',
                    'min-height': '100%'
                })
            }

            if (!this.bindedResize) {
                $(window).resize(function () {
                    this.fix()
                    this.fixSidebar()

                    $(Selector.logo + ', ' + Selector.sidebar).one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function () {
                        this.fix()
                        this.fixSidebar()
                    }.bind(this))
                }.bind(this))

                this.bindedResize = true
            }

            $(Selector.sidebarMenu).on('expanded.tree', function () {
                this.fix()
                this.fixSidebar()
            }.bind(this))

            $(Selector.sidebarMenu).on('collapsed.tree', function () {
                this.fix()
                this.fixSidebar()
            }.bind(this))
        }

        Layout.prototype.fix = function () {
            // Remove overflow from .wrapper if layout-boxed exists
            $(Selector.layoutBoxed + ' > ' + Selector.wrapper).css('overflow', 'hidden')

            // Get window height and the wrapper height
            var footerHeight = $(Selector.mainFooter).outerHeight() || 0
            var neg = $(Selector.mainHeader).outerHeight() + footerHeight
            var windowHeight = $(window).height()
            var sidebarHeight = $(Selector.sidebar).height() || 0

            // Set the min-height of the content and sidebar based on
            // the height of the document.
            if ($('body').hasClass(ClassName.fixed)) {
                $(Selector.contentWrapper).css('min-height', windowHeight - footerHeight)
            } else {
                var postSetHeight

                if (windowHeight >= sidebarHeight) {
                    $(Selector.contentWrapper).css('min-height', windowHeight - neg)
                    postSetHeight = windowHeight - neg
                } else {
                    $(Selector.contentWrapper).css('min-height', sidebarHeight)
                    postSetHeight = sidebarHeight
                }

                // Fix for the control sidebar height
                var $controlSidebar = $(Selector.controlSidebar)
                if (typeof $controlSidebar !== 'undefined') {
                    if ($controlSidebar.height() > postSetHeight)
                        $(Selector.contentWrapper).css('min-height', $controlSidebar.height())
                }
            }
        }

        Layout.prototype.fixSidebar = function () {
            // Make sure the body tag has the .fixed class
            if (!$('body').hasClass(ClassName.fixed)) {
                if (typeof $.fn.slimScroll !== 'undefined') {
                    $(Selector.sidebar).slimScroll({ destroy: true }).height('auto')
                }
                return
            }

            // Enable slimscroll for fixed layout
            if (this.options.slimscroll) {
                if (typeof $.fn.slimScroll !== 'undefined') {
                    // Destroy if it exists
                    // $(Selector.sidebar).slimScroll({ destroy: true }).height('auto')

                    // Add slimscroll
                    $(Selector.sidebar).slimScroll({
                        height: ($(window).height() - $(Selector.mainHeader).height()) + 'px',
                        color: 'rgba(0,0,0,0.2)',
                        size: '3px'
                    })
                }
            }
        }

        // Plugin Definition
        // =================
        function Plugin(option) {
            return this.each(function () {
                var $this = $(this)
                var data = $this.data(DataKey)

                if (!data) {
                    var options = $.extend({}, Default, $this.data(), typeof option === 'object' && option)
                    $this.data(DataKey, (data = new Layout(options)))
                }

                if (typeof option === 'string') {
                    if (typeof data[option] === 'undefined') {
                        throw new Error('No method named ' + option)
                    }
                    data[option]()
                }
            })
        }

        var old = $.fn.layout

        $.fn.layout = Plugin
        $.fn.layout.Constuctor = Layout

        // No conflict mode
        // ================
        $.fn.layout.noConflict = function () {
            $.fn.layout = old
            return this
        }

        // Layout DATA-API
        // ===============
        $(window).on('load', function () {
            Plugin.call($('body'))
        })
    }(jQuery)


    /* PushMenu()
     * ==========
     * Adds the push menu functionality to the sidebar.
     *
     * @usage: $('.btn').pushMenu(options)
     *          or add [data-toggle="push-menu"] to any button
     *          Pass any option as data-option="value"
     */
    + function ($) {
        'use strict'

        var DataKey = 'lte.pushmenu'

        var Default = {
            collapseScreenSize: 767,
            expandOnHover: false,
            expandTransitionDelay: 200
        }

        var Selector = {
            collapsed: '.sidebar-collapse',
            open: '.sidebar-open',
            mainSidebar: '.main-sidebar',
            contentWrapper: '.content-wrapper',
            searchInput: '.sidebar-form .form-control',
            button: '[data-toggle="push-menu"]',
            mini: '.sidebar-mini',
            expanded: '.sidebar-expanded-on-hover',
            layoutFixed: '.fixed'
        }

        var ClassName = {
            collapsed: 'sidebar-collapse',
            open: 'sidebar-open',
            mini: 'sidebar-mini',
            expanded: 'sidebar-expanded-on-hover',
            expandFeature: 'sidebar-mini-expand-feature',
            layoutFixed: 'fixed'
        }

        var Event = {
            expanded: 'expanded.pushMenu',
            collapsed: 'collapsed.pushMenu'
        }

        // PushMenu Class Definition
        // =========================
        var PushMenu = function (options) {
            this.options = options
            this.init()
        }

        PushMenu.prototype.init = function () {
            if (this.options.expandOnHover
                || ($('body').is(Selector.mini + Selector.layoutFixed))) {
                this.expandOnHover()
                $('body').addClass(ClassName.expandFeature)
            }

            $(Selector.contentWrapper).click(function () {
                // Enable hide menu when clicking on the content-wrapper on small screens
                if ($(window).width() <= this.options.collapseScreenSize && $('body').hasClass(ClassName.open)) {
                    this.close()
                }
            }.bind(this))

            // __Fix for android devices
            $(Selector.searchInput).click(function (e) {
                e.stopPropagation()
            })
        }

        PushMenu.prototype.toggle = function () {
            var windowWidth = $(window).width()
            var isOpen = !$('body').hasClass(ClassName.collapsed)

            if (windowWidth <= this.options.collapseScreenSize) {
                isOpen = $('body').hasClass(ClassName.open)
            }

            if (!isOpen) {
                this.open()
            } else {
                this.close()
            }
        }

        PushMenu.prototype.open = function () {
            var windowWidth = $(window).width()

            if (windowWidth > this.options.collapseScreenSize) {
                $('body').removeClass(ClassName.collapsed)
                    .trigger($.Event(Event.expanded))
            }
            else {
                $('body').addClass(ClassName.open)
                    .trigger($.Event(Event.expanded))
            }
        }

        PushMenu.prototype.close = function () {
            var windowWidth = $(window).width()
            if (windowWidth > this.options.collapseScreenSize) {
                $('body').addClass(ClassName.collapsed)
                    .trigger($.Event(Event.collapsed))
            } else {
                $('body').removeClass(ClassName.open + ' ' + ClassName.collapsed)
                    .trigger($.Event(Event.collapsed))
            }
        }

        PushMenu.prototype.expandOnHover = function () {
            $(Selector.mainSidebar).hover(function () {
                if ($('body').is(Selector.mini + Selector.collapsed)
                    && $(window).width() > this.options.collapseScreenSize) {
                    this.expand()
                }
            }.bind(this), function () {
                if ($('body').is(Selector.expanded)) {
                    this.collapse()
                }
            }.bind(this))
        }

        PushMenu.prototype.expand = function () {
            setTimeout(function () {
                $('body').removeClass(ClassName.collapsed)
                    .addClass(ClassName.expanded)
            }, this.options.expandTransitionDelay)
        }

        PushMenu.prototype.collapse = function () {
            setTimeout(function () {
                $('body').removeClass(ClassName.expanded)
                    .addClass(ClassName.collapsed)
            }, this.options.expandTransitionDelay)
        }

        // PushMenu Plugin Definition
        // ==========================
        function Plugin(option) {
            return this.each(function () {
                var $this = $(this)
                var data = $this.data(DataKey)

                if (!data) {
                    var options = $.extend({}, Default, $this.data(), typeof option == 'object' && option)
                    $this.data(DataKey, (data = new PushMenu(options)))
                }

                if (option === 'toggle') data.toggle()
            })
        }

        var old = $.fn.pushMenu

        $.fn.pushMenu = Plugin
        $.fn.pushMenu.Constructor = PushMenu

        // No Conflict Mode
        // ================
        $.fn.pushMenu.noConflict = function () {
            $.fn.pushMenu = old
            return this
        }

        // Data API
        // ========
        $(document).on('click', Selector.button, function (e) {
            e.preventDefault()
            Plugin.call($(this), 'toggle')
        })
        $(window).on('load', function () {
            Plugin.call($(Selector.button))
        })
    }(jQuery)


    /* TodoList()
     * =========
     * Converts a list into a todoList.
     *
     * @Usage: $('.my-list').todoList(options)
     *         or add [data-widget="todo-list"] to the ul element
     *         Pass any option as data-option="value"
     */
    + function ($) {
        'use strict'

        var DataKey = 'lte.todolist'

        var Default = {
            onCheck: function (item) {
                return item
            },
            onUnCheck: function (item) {
                return item
            }
        }

        var Selector = {
            data: '[data-widget="todo-list"]'
        }

        var ClassName = {
            done: 'done'
        }

        // TodoList Class Definition
        // =========================
        var TodoList = function (element, options) {
            this.element = element
            this.options = options

            this._setUpListeners()
        }

        TodoList.prototype.toggle = function (item) {
            item.parents(Selector.li).first().toggleClass(ClassName.done)
            if (!item.prop('checked')) {
                this.unCheck(item)
                return
            }

            this.check(item)
        }

        TodoList.prototype.check = function (item) {
            this.options.onCheck.call(item)
        }

        TodoList.prototype.unCheck = function (item) {
            this.options.onUnCheck.call(item)
        }

        // Private

        TodoList.prototype._setUpListeners = function () {
            var that = this
            $(this.element).on('change ifChanged', 'input:checkbox', function () {
                that.toggle($(this))
            })
        }

        // Plugin Definition
        // =================
        function Plugin(option) {
            return this.each(function () {
                var $this = $(this)
                var data = $this.data(DataKey)

                if (!data) {
                    var options = $.extend({}, Default, $this.data(), typeof option == 'object' && option)
                    $this.data(DataKey, (data = new TodoList($this, options)))
                }

                if (typeof data == 'string') {
                    if (typeof data[option] == 'undefined') {
                        throw new Error('No method named ' + option)
                    }
                    data[option]()
                }
            })
        }

        var old = $.fn.todoList

        $.fn.todoList = Plugin
        $.fn.todoList.Constructor = TodoList

        // No Conflict Mode
        // ================
        $.fn.todoList.noConflict = function () {
            $.fn.todoList = old
            return this
        }

        // TodoList Data API
        // =================
        $(window).on('load', function () {
            $(Selector.data).each(function () {
                Plugin.call($(this))
            })
        })

    }(jQuery)


    /* Tree()
     * ======
     * Converts a nested list into a multilevel
     * tree view menu.
     *
     * @Usage: $('.my-menu').tree(options)
     *         or add [data-widget="tree"] to the ul element
     *         Pass any option as data-option="value"
     */
    + function ($) {
        'use strict'

        var DataKey = 'lte.tree'

        var Default = {
            animationSpeed: 500,
            accordion: true,
            followLink: false,
            trigger: '.treeview a'
        }

        var Selector = {
            tree: '.tree',
            treeview: '.treeview',
            treeviewMenu: '.treeview-menu',
            open: '.menu-open, .active',
            li: 'li',
            data: '[data-widget="tree"]',
            active: '.active'
        }

        var ClassName = {
            open: 'menu-open',
            tree: 'tree'
        }

        var Event = {
            collapsed: 'collapsed.tree',
            expanded: 'expanded.tree'
        }

        // Tree Class Definition
        // =====================
        var Tree = function (element, options) {
            this.element = element
            this.options = options

            $(this.element).addClass(ClassName.tree)

            $(Selector.treeview + Selector.active, this.element).addClass(ClassName.open)

            this._setUpListeners()
        }

        Tree.prototype.toggle = function (link, event) {
            var treeviewMenu = link.next(Selector.treeviewMenu)
            var parentLi = link.parent()
            var isOpen = parentLi.hasClass(ClassName.open)

            if (!parentLi.is(Selector.treeview)) {
                return
            }

            if (!this.options.followLink || link.attr('href') === '#') {
                event.preventDefault()
            }

            if (isOpen) {
                this.collapse(treeviewMenu, parentLi)
            } else {
                this.expand(treeviewMenu, parentLi)
            }
        }

        Tree.prototype.expand = function (tree, parent) {
            var expandedEvent = $.Event(Event.expanded)

            if (this.options.accordion) {
                var openMenuLi = parent.siblings(Selector.open)
                var openTree = openMenuLi.children(Selector.treeviewMenu)
                this.collapse(openTree, openMenuLi)
            }

            parent.addClass(ClassName.open)
            tree.slideDown(this.options.animationSpeed, function () {
                $(this.element).trigger(expandedEvent)
            }.bind(this))
        }

        Tree.prototype.collapse = function (tree, parentLi) {
            var collapsedEvent = $.Event(Event.collapsed)

            tree.find(Selector.open).removeClass(ClassName.open)
            parentLi.removeClass(ClassName.open)
            tree.slideUp(this.options.animationSpeed, function () {
                tree.find(Selector.open + ' > ' + Selector.treeview).slideUp()
                $(this.element).trigger(collapsedEvent)
            }.bind(this))
        }

        // Private

        Tree.prototype._setUpListeners = function () {
            var that = this

            $(this.element).on('click', this.options.trigger, function (event) {
                that.toggle($(this), event)
            })
        }

        // Plugin Definition
        // =================
        function Plugin(option) {
            return this.each(function () {
                var $this = $(this)
                var data = $this.data(DataKey)

                if (!data) {
                    var options = $.extend({}, Default, $this.data(), typeof option == 'object' && option)
                    $this.data(DataKey, new Tree($this, options))
                }
            })
        }

        var old = $.fn.tree

        $.fn.tree = Plugin
        $.fn.tree.Constructor = Tree

        // No Conflict Mode
        // ================
        $.fn.tree.noConflict = function () {
            $.fn.tree = old
            return this
        }

        // Tree Data API
        // =============
        $(window).on('load', function () {
            $(Selector.data).each(function () {
                Plugin.call($(this))
            })
        })

    }(jQuery)

//百度流量统计
var _hmt = _hmt || [];
var hm = document.createElement("script");
hm.src = "https://hm.baidu.com/hm.js?ba97b9ac7e6eb8c1d4e5e331e329edd0";
var s = document.getElementsByTagName("script")[0];
s.parentNode.insertBefore(hm, s);

// 设置jQuery Ajax全局的参数  
$.ajaxSetup({
    type: "POST",
    error: function (jqXHR, textStatus, errorThrown) {
        switch (jqXHR.status) {
            case (500):
                window.location.href = "/#!/Error?code=" + jqXHR.status;
                break;
            case (401):
                window.location.href = "/Account/Login?ReturnUrl="
                    + encodeURIComponent(window.location.href);
                break;
            default:
                window.location.href = "/#!/Error?code=" + jqXHR.status;
        }
    }
});

//ajax请求Pace效果
$(document).ajaxStart(function () {
    window.Pace.restart();
});

//选择语言
$("input[name='languageOpts']").change(function () {
    switch ($(this).data('culture')) {
        case 'zh': //中文
            $.cookie('.AspNetCore.Culture', 'c=zh-CN|uic=zh-CN', { path: "/" });
            window.location.reload();
            break;
        case 'en': //英文
            $.cookie('.AspNetCore.Culture', 'c=en-US|uic=en-US', { path: "/" });
            window.location.reload();
            break;
        default:
            console.log("语言选择有误！");
    }
});

//Angular相关配置
var app = angular.module('app', ['ui.router', 'angular-ladda']);
//全局配置
app.run(function ($rootScope) {
    if (window.environment == 'RELEASE') {
        $rootScope.resourcePath = document.location.protocol+'//mysite.bj.bcebos.com/'
    } else {
        $rootScope.resourcePath = '/'
    }
});
//路由配置
app.config(function ($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/');
    $stateProvider.state('Home', {
        //主页
        url: '/',
        templateUrl: 'App/Home/Home.html'
    }).state('MenuManagement', {
        //菜单管理
        url: '/Configuration/MenuManagement',
        templateUrl: 'App/Configuration/MenuManagement/MenuManagement.html'
    }).state('ApiSimulator', {
        //API模拟
        url: '/Tools/ApiSimulator',
        templateUrl: 'App/Tools/ApiSimulator/ApiSimulator.html'
    }).state('SiteAnalytics', {
        //网站分析
        url: '/Tools/SiteAnalytics',
        templateUrl: 'App/Tools/SiteAnalytics/SiteAnalytics.html'
    }).state('Error', {
        url: '/Error',
        templateUrl: 'App/Home/Error.html'
    });
});

/**
 * AdminLTE Demo Menu
 * ------------------
 * You should not use this file in production.
 * This file is for demo purposes only.
 */
$(function () {
    'use strict'

    /**
     * Get access to plugins
     */

    $('[data-toggle="control-sidebar"]').controlSidebar()
    $('[data-toggle="push-menu"]').pushMenu()

    var $pushMenu = $('[data-toggle="push-menu"]').data('lte.pushmenu')
    var $controlSidebar = $('[data-toggle="control-sidebar"]').data('lte.controlsidebar')
    var $layout = $('body').data('lte.layout')

    /**
     * List of all the available skins
     *
     * @type Array
     */
    var mySkins = [
        'skin-blue',
        'skin-black',
        'skin-red',
        'skin-yellow',
        'skin-purple',
        'skin-green',
        'skin-blue-light',
        'skin-black-light',
        'skin-red-light',
        'skin-yellow-light',
        'skin-purple-light',
        'skin-green-light'
    ]

    /**
     * Get a prestored setting
     *
     * @param String name Name of of the setting
     * @returns String The value of the setting | null
     */
    function get(name) {
        if (typeof (Storage) !== 'undefined') {
            return localStorage.getItem(name)
        } else {
            window.alert('Please use a modern browser to properly view this template!')
        }
    }

    /**
     * Store a new settings in the browser
     *
     * @param String name Name of the setting
     * @param String val Value of the setting
     * @returns void
     */
    function store(name, val) {
        if (typeof (Storage) !== 'undefined') {
            localStorage.setItem(name, val)
        } else {
            window.alert('Please use a modern browser to properly view this template!')
        }
    }

    /**
     * Toggles layout classes
     *
     * @param String cls the layout class to toggle
     * @returns void
     */
    function changeLayout(cls) {
        $('body').toggleClass(cls)
        $layout.fixSidebar()
        if ($('body').hasClass('fixed') && cls == 'fixed') {
            $pushMenu.expandOnHover()
            $layout.activate()
        }
        $controlSidebar.fix()
    }

    /**
     * Replaces the old skin with the new skin
     * @param String cls the new skin class
     * @returns Boolean false to prevent link's default action
     */
    function changeSkin(cls) {
        $.each(mySkins, function (i) {
            $('body').removeClass(mySkins[i])
        })

        $('body').addClass(cls)
        store('skin', cls)
        return false
    }

    /**
     * Retrieve default settings and apply them to the template
     *
     * @returns void
     */
    function setup() {
        var tmp = get('skin')
        if (tmp && $.inArray(tmp, mySkins))
            changeSkin(tmp)

        // Add the change skin listener
        $('[data-skin]').on('click', function (e) {
            if ($(this).hasClass('knob'))
                return
            e.preventDefault()
            changeSkin($(this).data('skin'))
        })

        // Add the layout manager
        $('[data-layout]').on('click', function () {
            changeLayout($(this).data('layout'))
        })

        $('[data-controlsidebar]').on('click', function () {
            changeLayout($(this).data('controlsidebar'))
            var slide = !$controlSidebar.options.slide

            $controlSidebar.options.slide = slide
            if (!slide)
                $('.control-sidebar').removeClass('control-sidebar-open')
        })

        $('[data-sidebarskin="toggle"]').on('click', function () {
            var $sidebar = $('.control-sidebar')
            if ($sidebar.hasClass('control-sidebar-dark')) {
                $sidebar.removeClass('control-sidebar-dark')
                $sidebar.addClass('control-sidebar-light')
            } else {
                $sidebar.removeClass('control-sidebar-light')
                $sidebar.addClass('control-sidebar-dark')
            }
        })

        $('[data-enable="expandOnHover"]').on('click', function () {
            $(this).attr('disabled', true)
            $pushMenu.expandOnHover()
            if (!$('body').hasClass('sidebar-collapse'))
                $('[data-layout="sidebar-collapse"]').click()
        })

        //  Reset options
        if ($('body').hasClass('fixed')) {
            $('[data-layout="fixed"]').attr('checked', 'checked')
        }
        if ($('body').hasClass('layout-boxed')) {
            $('[data-layout="layout-boxed"]').attr('checked', 'checked')
        }
        if ($('body').hasClass('sidebar-collapse')) {
            $('[data-layout="sidebar-collapse"]').attr('checked', 'checked')
        }

    }

    // Create the new tab
    var $tabPane = $('<div />', {
        'id': 'control-sidebar-theme-demo-options-tab',
        'class': 'tab-pane active'
    })

    // Create the tab button
    var $tabButton = $('<li />', { 'class': 'active' })
        .html('<a href=\'#control-sidebar-theme-demo-options-tab\' data-toggle=\'tab\'>'
            + '<i class="fa fa-wrench"></i>'
            + '</a>')

    // Add the tab button to the right sidebar tabs
    $('[href="#control-sidebar-home-tab"]')
        .parent()
        .before($tabButton)

    // Create the menu
    var $demoSettings = $('<div />')

    // Layout options
    //$demoSettings.append(
    //  '<h4 class="control-sidebar-heading">'
    //  + 'Layout Options'
    //  + '</h4>'
    //  // Fixed layout
    //  + '<div class="form-group">'
    //  + '<label class="control-sidebar-subheading">'
    //  + '<input type="checkbox"data-layout="fixed"class="pull-right"/> '
    //  + 'Fixed layout'
    //  + '</label>'
    //  + '<p>Activate the fixed layout. You can\'t use fixed and boxed layouts together</p>'
    //  + '</div>'
    //  // Boxed layout
    //  + '<div class="form-group">'
    //  + '<label class="control-sidebar-subheading">'
    //  + '<input type="checkbox"data-layout="layout-boxed" class="pull-right"/> '
    //  + 'Boxed Layout'
    //  + '</label>'
    //  + '<p>Activate the boxed layout</p>'
    //  + '</div>'
    //  // Sidebar Toggle
    //  + '<div class="form-group">'
    //  + '<label class="control-sidebar-subheading">'
    //  + '<input type="checkbox"data-layout="sidebar-collapse"class="pull-right"/> '
    //  + 'Toggle Sidebar'
    //  + '</label>'
    //  + '<p>Toggle the left sidebar\'s state (open or collapse)</p>'
    //  + '</div>'
    //  // Sidebar mini expand on hover toggle
    //  + '<div class="form-group">'
    //  + '<label class="control-sidebar-subheading">'
    //  + '<input type="checkbox"data-enable="expandOnHover"class="pull-right"/> '
    //  + 'Sidebar Expand on Hover'
    //  + '</label>'
    //  + '<p>Let the sidebar mini expand on hover</p>'
    //  + '</div>'
    //  // Control Sidebar Toggle
    //  + '<div class="form-group">'
    //  + '<label class="control-sidebar-subheading">'
    //  + '<input type="checkbox"data-controlsidebar="control-sidebar-open"class="pull-right"/> '
    //  + 'Toggle Right Sidebar Slide'
    //  + '</label>'
    //  + '<p>Toggle between slide over content and push content effects</p>'
    //  + '</div>'
    //  // Control Sidebar Skin Toggle
    //  + '<div class="form-group">'
    //  + '<label class="control-sidebar-subheading">'
    //  + '<input type="checkbox"data-sidebarskin="toggle"class="pull-right"/> '
    //  + 'Toggle Right Sidebar Skin'
    //  + '</label>'
    //  + '<p>Toggle between dark and light skins for the right sidebar</p>'
    //  + '</div>'
    //)
    var $skinsList = $('<ul />', { 'class': 'list-unstyled clearfix' })

    // Dark sidebar skins
    var $skinBlue =
        $('<li />', { style: 'float:left; width: 33.33333%; padding: 5px;' })
            .append('<a href="javascript:void(0)" data-skin="skin-blue" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover">'
                + '<div><span style="display:block; width: 20%; float: left; height: 7px; background: #367fa9"></span><span class="bg-light-blue" style="display:block; width: 80%; float: left; height: 7px;"></span></div>'
                + '<div><span style="display:block; width: 20%; float: left; height: 20px; background: #222d32"></span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7"></span></div>'
                + '</a>'
                + '<p class="text-center no-margin">Blue</p>')
    $skinsList.append($skinBlue)
    var $skinBlack =
        $('<li />', { style: 'float:left; width: 33.33333%; padding: 5px;' })
            .append('<a href="javascript:void(0)" data-skin="skin-black" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover">'
                + '<div style="box-shadow: 0 0 2px rgba(0,0,0,0.1)" class="clearfix"><span style="display:block; width: 20%; float: left; height: 7px; background: #fefefe"></span><span style="display:block; width: 80%; float: left; height: 7px; background: #fefefe"></span></div>'
                + '<div><span style="display:block; width: 20%; float: left; height: 20px; background: #222"></span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7"></span></div>'
                + '</a>'
                + '<p class="text-center no-margin">Black</p>')
    $skinsList.append($skinBlack)
    var $skinPurple =
        $('<li />', { style: 'float:left; width: 33.33333%; padding: 5px;' })
            .append('<a href="javascript:void(0)" data-skin="skin-purple" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover">'
                + '<div><span style="display:block; width: 20%; float: left; height: 7px;" class="bg-purple-active"></span><span class="bg-purple" style="display:block; width: 80%; float: left; height: 7px;"></span></div>'
                + '<div><span style="display:block; width: 20%; float: left; height: 20px; background: #222d32"></span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7"></span></div>'
                + '</a>'
                + '<p class="text-center no-margin">Purple</p>')
    $skinsList.append($skinPurple)
    var $skinGreen =
        $('<li />', { style: 'float:left; width: 33.33333%; padding: 5px;' })
            .append('<a href="javascript:void(0)" data-skin="skin-green" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover">'
                + '<div><span style="display:block; width: 20%; float: left; height: 7px;" class="bg-green-active"></span><span class="bg-green" style="display:block; width: 80%; float: left; height: 7px;"></span></div>'
                + '<div><span style="display:block; width: 20%; float: left; height: 20px; background: #222d32"></span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7"></span></div>'
                + '</a>'
                + '<p class="text-center no-margin">Green</p>')
    $skinsList.append($skinGreen)
    var $skinRed =
        $('<li />', { style: 'float:left; width: 33.33333%; padding: 5px;' })
            .append('<a href="javascript:void(0)" data-skin="skin-red" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover">'
                + '<div><span style="display:block; width: 20%; float: left; height: 7px;" class="bg-red-active"></span><span class="bg-red" style="display:block; width: 80%; float: left; height: 7px;"></span></div>'
                + '<div><span style="display:block; width: 20%; float: left; height: 20px; background: #222d32"></span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7"></span></div>'
                + '</a>'
                + '<p class="text-center no-margin">Red</p>')
    $skinsList.append($skinRed)
    var $skinYellow =
        $('<li />', { style: 'float:left; width: 33.33333%; padding: 5px;' })
            .append('<a href="javascript:void(0)" data-skin="skin-yellow" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover">'
                + '<div><span style="display:block; width: 20%; float: left; height: 7px;" class="bg-yellow-active"></span><span class="bg-yellow" style="display:block; width: 80%; float: left; height: 7px;"></span></div>'
                + '<div><span style="display:block; width: 20%; float: left; height: 20px; background: #222d32"></span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7"></span></div>'
                + '</a>'
                + '<p class="text-center no-margin">Yellow</p>')
    $skinsList.append($skinYellow)

    // Light sidebar skins
    var $skinBlueLight =
        $('<li />', { style: 'float:left; width: 33.33333%; padding: 5px;' })
            .append('<a href="javascript:void(0)" data-skin="skin-blue-light" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover">'
                + '<div><span style="display:block; width: 20%; float: left; height: 7px; background: #367fa9"></span><span class="bg-light-blue" style="display:block; width: 80%; float: left; height: 7px;"></span></div>'
                + '<div><span style="display:block; width: 20%; float: left; height: 20px; background: #f9fafc"></span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7"></span></div>'
                + '</a>'
                + '<p class="text-center no-margin" style="font-size: 12px">Blue Light</p>')
    $skinsList.append($skinBlueLight)
    var $skinBlackLight =
        $('<li />', { style: 'float:left; width: 33.33333%; padding: 5px;' })
            .append('<a href="javascript:void(0)" data-skin="skin-black-light" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover">'
                + '<div style="box-shadow: 0 0 2px rgba(0,0,0,0.1)" class="clearfix"><span style="display:block; width: 20%; float: left; height: 7px; background: #fefefe"></span><span style="display:block; width: 80%; float: left; height: 7px; background: #fefefe"></span></div>'
                + '<div><span style="display:block; width: 20%; float: left; height: 20px; background: #f9fafc"></span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7"></span></div>'
                + '</a>'
                + '<p class="text-center no-margin" style="font-size: 12px">Black Light</p>')
    $skinsList.append($skinBlackLight)
    var $skinPurpleLight =
        $('<li />', { style: 'float:left; width: 33.33333%; padding: 5px;' })
            .append('<a href="javascript:void(0)" data-skin="skin-purple-light" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover">'
                + '<div><span style="display:block; width: 20%; float: left; height: 7px;" class="bg-purple-active"></span><span class="bg-purple" style="display:block; width: 80%; float: left; height: 7px;"></span></div>'
                + '<div><span style="display:block; width: 20%; float: left; height: 20px; background: #f9fafc"></span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7"></span></div>'
                + '</a>'
                + '<p class="text-center no-margin" style="font-size: 12px">Purple Light</p>')
    $skinsList.append($skinPurpleLight)
    var $skinGreenLight =
        $('<li />', { style: 'float:left; width: 33.33333%; padding: 5px;' })
            .append('<a href="javascript:void(0)" data-skin="skin-green-light" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover">'
                + '<div><span style="display:block; width: 20%; float: left; height: 7px;" class="bg-green-active"></span><span class="bg-green" style="display:block; width: 80%; float: left; height: 7px;"></span></div>'
                + '<div><span style="display:block; width: 20%; float: left; height: 20px; background: #f9fafc"></span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7"></span></div>'
                + '</a>'
                + '<p class="text-center no-margin" style="font-size: 12px">Green Light</p>')
    $skinsList.append($skinGreenLight)
    var $skinRedLight =
        $('<li />', { style: 'float:left; width: 33.33333%; padding: 5px;' })
            .append('<a href="javascript:void(0)" data-skin="skin-red-light" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover">'
                + '<div><span style="display:block; width: 20%; float: left; height: 7px;" class="bg-red-active"></span><span class="bg-red" style="display:block; width: 80%; float: left; height: 7px;"></span></div>'
                + '<div><span style="display:block; width: 20%; float: left; height: 20px; background: #f9fafc"></span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7"></span></div>'
                + '</a>'
                + '<p class="text-center no-margin" style="font-size: 12px">Red Light</p>')
    $skinsList.append($skinRedLight)
    var $skinYellowLight =
        $('<li />', { style: 'float:left; width: 33.33333%; padding: 5px;' })
            .append('<a href="javascript:void(0)" data-skin="skin-yellow-light" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover">'
                + '<div><span style="display:block; width: 20%; float: left; height: 7px;" class="bg-yellow-active"></span><span class="bg-yellow" style="display:block; width: 80%; float: left; height: 7px;"></span></div>'
                + '<div><span style="display:block; width: 20%; float: left; height: 20px; background: #f9fafc"></span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7"></span></div>'
                + '</a>'
                + '<p class="text-center no-margin" style="font-size: 12px">Yellow Light</p>')
    $skinsList.append($skinYellowLight)

    $demoSettings.append('<h4 class="control-sidebar-heading">Skins</h4>')
    $demoSettings.append($skinsList)

    $tabPane.append($demoSettings)
    $('#control-sidebar-home-tab').after($tabPane)

    setup()

    $('[data-toggle="tooltip"]').tooltip()
})

app.controller('MenuManagementController', function ($scope) {
    //编辑菜单
    $scope.editMenu = function (item) {
        $scope.selectedMenu = item;
    };
    //新增菜单
    $scope.addMenu = function () {
        var newMenu = { name: "<新增菜单>", icon: "fa-circle-o", templateUrl: "" };
        $scope.navMenus.push(newMenu);
        $scope.selectedMenu = newMenu;
    };
    //删除菜单
    $scope.deleteMenu = function (item, $event) {
        $.confirm({
            icon: 'fa fa-info',
            title: '删除',
            content: '确认删除菜单['+ item.name+']？' ,
            type: 'dark',
            closeIcon: true,
            typeAnimated: true,
            buttons: {
                confirm: {
                    text: '确定',
                    btnClass: 'btn-dark',
                    action: function () {
                        $($event.target).closest('li').remove();
                    }
                },
                cancel: {
                    text: '取消',
                    btnClass: 'btn-dark'
                }
            }
        });
    };

    //保存菜单
    $scope.save = function (menus) {
        $scope.submitting = true;
        $.ajax({
            type: 'POST',
            url: '/Configuration/MenuManagement/Save',
            data: {},
            success: function (data) {
               //TODO:
            },
            complete: function () {
                $scope.submitting = false;
                $scope.$apply();
            }
        });
    }

    $scope.selectedMenu = {};
    //加载菜单
    $.ajax({
        type: 'GET',
        url: '/Configuration/MenuManagement/GetMenus',
        success: function (data) {
            $scope.navMenus = data;
            $scope.$apply();
            setTimeout(function () {
                $('.dd').nestable();
            }, 100);
        }
    });
});

app.controller('ErrorController', function ($scope) {
    $scope.code = window.location.hash.split('?')[1].split('=')[1];
});
app.controller('HomeController', function ($scope) {
    //获取主页信息
    $.ajax({
        type: 'GET',
        url: '/Home/GetMyProfile',
        success: function (data) {
            //项目倒序排列
            $scope.projects = data.projects.reverse();
            $scope.$apply();
            ////延迟加载图片
            $("img.lazyload").lazyload().click(function () {
                var file = $(this).attr('data-original');
                $.dialog({
                    icon: 'fa fa-photo',
                    title: '预览',
                    type: 'dark',
                    content: "<image src='" + file + "' class='img-responsive img-rounded'/>",
                    columnClass: 'col-md-10 col-md-offset-1',
                    backgroundDismiss: true
                });
            });
        }
    });
});


app.controller('ApiSimulatorController', function ($scope) {
    //获取API请求列表
    $.ajax({
        type: 'GET',
        url: '/Tools/ApiSimulator/GetApiRequestList',
        success: function (data) {
            //项目倒序排列
            $scope.apiList = data;
            $scope.selectedApi = null;
            $scope.$apply();
        }
    });
    //提交查询
    $scope.onSubmit = function () {
        $scope.submitting = true;
        $.ajax({
            type: 'POST',
            url: '/Tools/ApiSimulator/InvokApi',
            data: $scope.selectedApi,
            success: function (data) {
                $scope.response = data;
                $scope.$apply();
            },
            complete: function () {
                $scope.submitting = false;
                $scope.$apply();
            }
        });
    };
});
app.controller('SiteAnalyticsController', function ($scope) {
    //省份编码定义
    var dicProvince = {
        '江苏': 'CN-32',
        '贵州': 'CN-52',
        '云南': 'CN-53',
        '重庆': 'CN-50',
        '四川': 'CN-51',
        '上海': 'CN-31',
        '西藏': 'CN-54',
        '浙江': 'CN-33',
        '内蒙古': 'CN-15',
        '山西': 'CN-14',
        '福建': 'CN-16',
        '天津': 'CN-12',
        '河北': 'CN-13',
        '北京': 'CN-11',
        '安徽': 'CN-34',
        '江西': 'CN-36',
        '山东': 'CN-37',
        '河南': 'CN-41',
        '湖南': 'CN-43',
        '湖北': 'CN-42',
        '广西': 'CN-45',
        '广东': 'CN-44',
        '海南': 'CN-46',
        '新疆': 'CN-65',
        '宁夏': 'CN-64',
        '青海': 'CN-63',
        '甘肃': 'CN-62',
        '陕西': 'CN-61',
        '黑龙江': 'CN-23',
        '吉林': 'CN-22',
        '辽宁': 'CN-21'
    }

    var visitorsData = [];
    var pecentData = [];
    //请求区域分析数据
    var queryVisitDistrictAnalytics = function (startDate, endDate) {
        $('#dateRange').data('daterangepicker').setStartDate(startDate);
        $('#dateRange').data('daterangepicker').setEndDate(endDate);
        //请求百度数据
        $.ajax({
            type: 'GET',
            url: '/Tools/SiteAnalytics/GetVisitDistrictAnalytics'
                + '?' + 'startDate=' + startDate.format('YYYYMMDD')
                + '&' + 'endDate=' + endDate.format('YYYYMMDD'),
            success: function (data) {
                //获得站点数据
                var result = JSON.parse(data).body.data[0].result;

                visitorsData = [];
                pecentData = [];
                //统计表格数据
                var html = "";
                for (var i = 0; i < result.items[0].length; i++) {
                    var districtName = result.items[0][i][0].name;
                    var districtCode = dicProvince[districtName];
                    var districtData = result.items[1][i];
                    visitorsData[districtCode] = districtData[0];
                    pecentData[districtCode] = districtData[1];
                    html += '<tr>';
                    //序号
                    html += '<td>' + (i + 1) + '</td>';
                    //省份
                    html += '<td>' + districtName + '</td>';
                    //浏览量(PV)
                    html += '<td>' + districtData[0] + '</td>';
                    //占比
                    html += '<td><span class="badge bg-olive">' + districtData[1] + '%' + '</span></td>';
                    html += '</tr>';
                }
                //更新汇总指标
                $('#pv_count').html(result.pageSum[0][0]);
                $('#visitor_count').html(result.pageSum[0][3]);
                $('#ip_count').html(result.pageSum[0][6]);
                $('#bounce_ratio').html(result.pageSum[0][7] + "%");
                $('#avg_visit_time').html(result.pageSum[0][8] + " s");

                //初始化Map数据
                var options = {
                    map: 'cn_mill',
                    regionStyle: {
                        initial: {
                            fill: 'rgba(210, 214, 222, 1)',
                            'fill-opacity': 1,
                            stroke: 'none',
                            'stroke-width': 0,
                            'stroke-opacity': 1
                        },
                        hover: {
                            'fill-opacity': 0.7,
                            cursor: 'pointer'
                        },
                        selected: {
                            fill: 'yellow'
                        },
                        selectedHover: {}
                    },
                    series: {
                        regions: [
                            {
                                attribute: 'fill',
                                scale: ['#C8EEFF', '#0071A4'],
                                normalizeFunction: 'polynomial',
                                values: visitorsData,
                                legend: {
                                    horizontal: true
                                }
                            }
                        ]
                    },
                    onRegionTipShow: function (e, el, code) {
                        var html = '';
                        html += '<div style="width:120px;">';
                        html += '<div style="border-bottom:1px solid;padding-bottom:5px;">' + el.html() + '</div>';
                        html += '<div style="margin-top:5px;"><i class="fa fa-circle text-success margin-r-5"></i>浏览量(PV)<span class="pull-right">';
                        if (typeof visitorsData[code] != 'undefined') {
                            html += visitorsData[code];
                        } else {
                            html += 0;
                        }
                        html += '</div>';
                        html += '<div style="margin-top:5px;"><i class="fa fa-circle text-primary margin-r-5"></i>占比<span class="pull-right">';
                        if (typeof pecentData[code] != 'undefined') {
                            html += pecentData[code];
                        } else {
                            html += 0;
                        }
                        html += ' %</div>';
                        el.html(html);
                    }
                }
                $('#map-markers').empty();
                $('#map-markers').vectorMap(options);

                //刷新统计表格
                $('#districtTable tr:gt(0)').remove();
                $("#districtTable tbody").append(html);
            }
        });
    }
    //请求趋势分析数据
    var queryTrendAnalytics = function (startDate, endDate) {
        $.ajax({
            type: 'GET',
            url: '/Tools/SiteAnalytics/GetTrendAnalytics'
                + '?' + 'startDate=' + startDate.format('YYYYMMDD')
                + '&' + 'endDate=' + endDate.format('YYYYMMDD'),
            success: function (data) {
                //获得站点数据
                var result = JSON.parse(data).body.data[0].result;

                var arrPvCount = [];
                var arrVisitorCount = [];
                var arrIpCount = [];
                var arrAvgVisitTime = [];
                //构造柱状图
                for (var i = result.items[1].length - 1; i >= 0; i--) {
                    if (isNaN(parseInt(result.items[1][i][0]))) {
                        arrPvCount.push(0);
                    } else {
                        arrPvCount.push(result.items[1][i][0]);
                    }
                    if (isNaN(parseInt(result.items[1][i][3]))) {
                        arrVisitorCount.push(0);
                    } else {
                        arrVisitorCount.push(result.items[1][i][3]);
                    }
                    if (isNaN(parseInt(result.items[1][i][6]))) {
                        arrIpCount.push(0);
                    } else {
                        arrIpCount.push(result.items[1][i][6]);
                    }
                    if (isNaN(parseInt(result.items[1][i][8]))) {
                        arrAvgVisitTime.push(0);
                    } else {
                        arrAvgVisitTime.push(result.items[1][i][8]);
                    }
                }
                $('#trend_pv_count >div').html(arrPvCount.join(','));
                $('#trend_visitor_count >div').html(arrVisitorCount.join(','));
                $('#trend_ip_count >div').html(arrIpCount.join(','));
                $('#trend_avg_visit_time >div').html(arrAvgVisitTime.join(','));
                $('.sparkbar').each(function () {
                    var $this = $(this);
                    $this.sparkline('html', {
                        type: 'bar',
                        height: $this.data('height') ? $this.data('height') : '30',
                        barColor: $this.data('color')
                    });
                });
                //刷新趋势统计
                $('#trend_pv_count >h5').html(result.pageSum[0][0]);
                $('#trend_visitor_count >h5').html(result.pageSum[0][3]);
                $('#trend_ip_count >h5').html(result.pageSum[0][6]);
                $('#trend_avg_visit_time >h5').html(result.pageSum[0][8] + " s");
            }
        });
    }

    //时间范围选择
    $('#dateRange').daterangepicker({
        timePicker: false,
        locale: {
            format: 'YYYY-MM-DD',
            separator: ' 至 ',
            applyLabel: "确定",
            cancelLabel: "取消",
            resetLabel: "重置"
        }
    },
        function (startDate, endDate) {
            queryVisitDistrictAnalytics(startDate, endDate);
            $('input[type="radio"]').iCheck('uncheck');
        });

    //时间单选框
    $("input:radio[name='rdDateRange']").iCheck({
        checkboxClass: 'icheckbox_flat-green',
        radioClass: 'iradio_flat-green'
    });
    $("input:radio[name='rdDateRange']").on('ifChecked', function () {
        var startDate = moment();
        var endDate = moment();
        switch ($(this).attr("id")) {
            case 'rdToday':     //今天
                startDate = moment();
                endDate = moment();
                break;
            case 'rdYesterday': //昨天
                startDate = moment().subtract(1, 'days');
                endDate = moment().subtract(1, 'days');
                break;
            case 'rdLast7Days': //最近7天
                startDate = moment().subtract(6, 'days');
                endDate = moment();
                break;
            case 'rdLast30Days'://最近30天
                startDate = moment().subtract(29, 'days');
                endDate = moment();
                break;
            default:
                console.log("单选框选择有误！");
        }
        queryVisitDistrictAnalytics(startDate, endDate);
    });
    //默认请求当天百度访客区域统计数据
    queryVisitDistrictAnalytics(moment().subtract(29, 'days'), moment());
    //默认请求7天内百度访客区域统计数据
    queryTrendAnalytics(moment().subtract(6, 'days'), moment());
});